"use client"

import {Blog} from "@/db/blog";
import {SharedBody} from "@/components/shared-body";
import {Header} from "@/components/Header";
import {Members} from "@/db/members";
import Image from "next/image";
import {Teams} from "@/db/teams";
import {TeamIcon} from "@/components/team-icon";
import Link from "next/link";
import {useSearchParams} from "next/navigation";
import {ceil} from "es-toolkit/compat";
import {useState} from "react";
import {FaLongArrowAltRight, FaSearch, FaBars, FaTimes} from "react-icons/fa";
import {FaArrowLeftLong, FaArrowRightLong} from "react-icons/fa6";


type SearchQuery = {
    time: { isAll: boolean, year: number, month: number },
    categories: string[],
    tags: string[],
    team: string | null,
    word: string | null,
    sort: "new" | "old",
    author: string[],
    limit: number,
    page: number,
}

export default function Posts({ blogs }: { blogs: Blog[] }) {

    const today = new Date();

    const searchParams = useSearchParams();
    const searchParamsM = searchParams.get("m");
    const time = searchParamsM ? {year: Number(searchParamsM.slice(0, 4)), month: Number(searchParamsM.slice(4, 6))} : "all";  // 202501の形式


    const [searchQuery, _setSearchQuery] = useState({
        time: { isAll: time === "all", year: time === "all" ? today.getFullYear() : time.year, month: time === "all" ? today.getMonth() + 1 : time.month },
        categories: searchParams.get("cat")?.split(",") ?? [],
        team: searchParams.get("team") ?? null,
        tags: searchParams.get("tag")?.split(",") ?? [],
        word: searchParams.get("word") ?? null,
        sort: "new" as const, // "new" or "old"
        author: [],
        limit: 10,
        page: 1,
    } as SearchQuery);

    // モバイル用: フィルター(aside)開閉状態
    const [isFilterOpen, setIsFilterOpen] = useState(false);

    function setSearchQuery(query: SearchQuery | ((_prev: SearchQuery) => SearchQuery)) {
        const newQuery = typeof query === "function" ? query(searchQuery) : query;
        if (newQuery.page > pages) {
            newQuery.page = pages;
        }
        if (newQuery.page < 1) {
            newQuery.page = 1;
        }
        _setSearchQuery(newQuery);
        // URL書き換え
        const urlParams = new URLSearchParams();
        if (!newQuery.time.isAll) {
            const monthStr = newQuery.time.month < 10 ? `0${newQuery.time.month}` : `${newQuery.time.month}`;
            urlParams.append("m", `${newQuery.time.year}${monthStr}`);
        }
        if (newQuery.categories.length > 0) {
            urlParams.append("cat", newQuery.categories.join(","));
        }
        if (newQuery.team) {
            urlParams.append("team", newQuery.team);
        }
        if (newQuery.tags.length > 0) {
            urlParams.append("tag", newQuery.tags.join(","));
        }
        if (newQuery.author.length > 0) {
            urlParams.append("author", newQuery.author.join(","));
        }
        if (newQuery.word) {
            urlParams.append("word", newQuery.word);
        }
        if (newQuery.sort !== "new") {
            urlParams.append("sort", newQuery.sort);
        }
        if (newQuery.limit !== 10) {
            urlParams.append("limit", String(newQuery.limit));
        }
        if (newQuery.page !== 1) {
            urlParams.append("page", String(newQuery.page));
        }
        const paramString = urlParams.toString();
        window.history.replaceState(null, "", `/blog?${paramString}`);
    }


    const blogsSearchedAll = blogs.filter(blog => {
        if (!searchQuery.time.isAll) {
            const blogDate = new Date(blog.createdAt ?? blog.updatedAt ?? "");
            if (isNaN(blogDate.getTime())) return false;
            if (blogDate.getFullYear() !== searchQuery.time.year || (blogDate.getMonth() + 1) !== searchQuery.time.month) {
                return false;
            }
        }
        if (searchQuery.categories.length > 0) {
            if (!blog.categories || !blog.categories.some(cat => searchQuery.categories.includes(cat))) {
                return false;
            }
        }
        if (searchQuery.team) {
            if (!blog.team || blog.team !== searchQuery.team) {
                return false;
            }
        }
        if (searchQuery.tags.length > 0) {
            if (!blog.tags || !blog.tags.some(tag => searchQuery.tags.includes(tag))) {
                return false;
            }
        }
        if (searchQuery.author.length > 0) {
            if (!blog.author || !searchQuery.author.includes(blog.author)) {
                return false;
            }
        }
        if (searchQuery.word) {
            // Hello+World -> helloとworldの両方を含む
            const lowerSearch = searchQuery.word.toLowerCase();
            const words = lowerSearch.split(" ").map(w => w.trim()).filter(w => w.length > 0);
            const haystack = (blog.title + " " + (blog.description ?? "") + " " /* + (blog.content ?? "")*/).toLowerCase();
            if (!words.every(word => haystack.includes(word))) {
                return false;
            }
        }
        return true;
    });

    const blogsSearched = blogsSearchedAll.slice(searchQuery.limit * (searchQuery.page - 1), searchQuery.limit * searchQuery.page);
    const pages = ceil(blogsSearchedAll.length / searchQuery.limit);

    return (
        <SharedBody>
            <Header currentPath={"/blog/"} pane="blog"/>

            {/* モバイル: フィルターのオーバーレイ */}
            {isFilterOpen && (
                <div className="fixed inset-0 bg-black/40 z-40 lg:hidden" onClick={() => setIsFilterOpen(false)} />
            )}

            {/* モバイル: フィルターボタン */}
            <button
                type="button"
                className="fixed top-24 left-4 z-25 lg:hidden bg-gray-200/80 dark:bg-gray-800/80 text-gray-800 dark:text-gray-100 px-3 py-2 rounded-md shadow backdrop-blur-md border border-gray-300 dark:border-gray-700"
                title="フィルターを開く"
                onClick={() => setIsFilterOpen(true)}
                aria-label="フィルターを開く"
            >
                <span className="inline-flex items-center space-x-2"><FaBars/><span>フィルター</span></span>
            </button>

            {/* サイドバー: デスクトップ常時、モバイルはスライドイン */}
            <aside className={`fixed bg-gray-200 dark:bg-gray-800 z-50 left-0 top-20 bottom-2 w-80 rounded-r-xl pr-2 py-6 pb-8 overflow-y-auto transition-transform duration-300 lg:translate-x-0 ${isFilterOpen ? "translate-x-0" : "-translate-x-full lg:translate-x-0"}`}>
                {/* モバイル: ヘッダーと閉じる */}
                <div className="flex items-center justify-between px-4 mb-4 lg:hidden">
                    <h2 className="font-bold text-xl">フィルター</h2>
                    <button type="button" aria-label="フィルターを閉じる" onClick={() => setIsFilterOpen(false)} className="p-1 rounded hover:bg-black/5 dark:hover:bg-white/10">
                        <FaTimes/>
                    </button>
                </div>
                <section className="mb-6">
                    <h2 className="font-bold text-xl mx-4 mb-4">カテゴリ</h2>
                    <ul className="pr-2 flex flex-col space-y-1">
                        {["お知らせ", "開発", "雑記"].map((category, i) => (
                            <li key={i} className={`p-0.5 pl-8 text-gray-200 rounded-r-full -mr-4 -translate-x-4 hover:-translate-x-2 shadow-none hover:shadow-md shadow-black/20 transition-transform duration-200 active:scale-97 border-t-3 border-r-3 border-b-3 cursor-pointer
                            ${searchQuery.categories.includes(category) ? "border-blue-400 dark:border-blue-400 bg-sky-600 dark:bg-sky-700 shadow" : "bg-gray-500 dark:bg-gray-700 border-transparent" }`}
                                onClick={() => {
                                    setSearchQuery(prev => {
                                        const alreadySelected = prev.categories.includes(category);
                                        return {
                                            ...prev,
                                            categories: alreadySelected
                                                ? prev.categories.filter(cat => cat !== category)
                                                : [...prev.categories, category]
                                        };
                                    });
                                }}>
                                {category}
                            </li>
                        ))
                        }
                    </ul>
                </section>
                <section className="mb-6">
                    <h2 className="font-bold text-xl mx-4 mb-2">キーワード</h2>
                    <div className="mx-2 border border-gray-400 dark:border-gray-600 bg-gray-100 dark:bg-gray-700 dark:text-gray-300 rounded py-1 flex items-center">
                        <label className="mx-2"><FaSearch size={18}/></label>
                        <input type="text" value={searchQuery.word ?? ""} placeholder="キーワードで検索"
                               className="w-full"
                               onChange={e => {
                                   const newWord = e.target.value;
                                   setSearchQuery(prev => ({
                                       ...prev,
                                       word: newWord.length === 0 ? null : newWord,
                                       page: 1,
                                   }));
                               }}
                        />
                    </div>
                </section>
                <section className="mb-6">
                    <h2 className="font-bold text-xl mx-4 mb-2">アーカイブ</h2>
                    <div className="ml-2 space-x-1 flex flex-col space-y-1">
                        <label className="inline-flex items-center px-2 py-1 rounded-md bg-gray-300/80 dark:bg-gray-700/80 hover:bg-gray-300 dark:hover:bg-gray-600 cursor-pointer text-sm font-medium select-none transition-colors w-full">
                            <input
                                defaultChecked
                                type="radio"
                                name="archive"
                                className="peer h-4 w-4 accent-gray-600 rounded border border-gray-500/60 bg-gray-100 text-gray-800 focus:outline-none focus:ring-2 focus:ring-gray-500/60 focus:ring-offset-1 disabled:opacity-40 disabled:cursor-not-allowed"
                                onChange={(e) => {
                                    if (e.currentTarget.checked) {
                                        setSearchQuery(prev => ({...prev, time: {...prev.time, isAll: true}}));
                                    }
                                }}
                            />
                            <span className="ml-2 text-gray-500 peer-checked:text-gray-900 dark:text-gray-400 dark:peer-checked:text-gray-200">全期間</span>
                        </label>
                        <label className="inline-flex items-center px-2 py-1 rounded-md bg-gray-300/80 dark:bg-gray-700/80 hover:bg-gray-300 dark:hover:bg-gray-600 cursor-pointer text-sm font-medium select-none transition-colors w-full">
                            <input
                                type="radio"
                                name="archive"
                                className="peer h-4 w-4 accent-gray-600 rounded border border-gray-500/60 bg-gray-100 text-gray-800 focus:outline-none focus:ring-2 focus:ring-gray-500/60 focus:ring-offset-1 disabled:opacity-40 disabled:cursor-not-allowed"
                                onChange={(e) => {
                                    if (e.currentTarget.checked) {
                                        setSearchQuery(prev => ({...prev, time: {...prev.time, isAll: false}}));
                                    }
                                }}
                            />
                            <input type="number" min={2024} max={2025} value={searchQuery.time.year}
                                   className="ml-2 w-20 p-0.5 rounded text-center border border-gray-200 peer-checked:border-gray-400 dark:border-gray-600 dark:peer-checked:border-gray-500 bg-gray-200 peer-checked:bg-gray-100 dark:bg-gray-700 dark:peer-checked:bg-gray-800 dark:text-gray-400 dark:peer-checked:text-gray-200"
                                   onChange={e => {
                                       const newYear = Number(e.target.value);
                                       setSearchQuery(prev => ({
                                           ...prev,
                                           time: {
                                               ...prev.time,
                                               year: newYear,
                                           }
                                       }));
                                   }}
                            />
                            <span className="mx-2 text-gray-500 peer-checked:text-gray-900 dark:text-gray-400 dark:peer-checked:text-gray-200">年</span>
                            <input type="number" min={1} max={12} value={searchQuery.time.month}
                                   className="w-10 p-0.5 rounded text-center border border-gray-200 peer-checked:border-gray-400 dark:border-gray-600 dark:peer-checked:border-gray-500 bg-gray-200 peer-checked:bg-gray-100 dark:bg-gray-700 dark:peer-checked:bg-gray-800 dark:text-gray-400 dark:peer-checked:text-gray-200"
                                   onChange={e => {
                                       const newMonth = Number(e.target.value);
                                       setSearchQuery(prev => ({
                                           ...prev,
                                           time: {
                                               ...prev.time,
                                               month: newMonth,
                                           }
                                       }));
                                   }}
                            />
                            <span className="mx-2 text-gray-500 peer-checked:text-gray-900 dark:text-gray-400 dark:peer-checked:text-gray-200">月</span>
                        </label>
                    </div>
                </section>
                <section className="mb-6">
                    <h2 className="font-bold text-xl mx-4 mb-4">筆者</h2>
                    <ul className="pr-2 inline-flex flex-col space-y-1 ml-2">
                        {Object.values(Members).map((author, i) => (
                            <li key={i} className={`flex items-center p-0.5 bg-gray-500 dark:bg-gray-700 text-gray-200 rounded-full shadow-none hover:shadow-md shadow-black/20 transition-all duration-200 border-3 active:scale-97 cursor-pointer
                            ${searchQuery.author.includes(author.id) ? "border-blue-400 dark:border-blue-400 bg-sky-600 dark:bg-sky-700 shadow" : "bg-gray-500 dark:bg-gray-700 border-transparent"}`}
                            onClick={() => {
                                setSearchQuery(prev => {
                                    const alreadySelected = prev.author.includes(author.id);
                                    return {
                                        ...prev,
                                        author: alreadySelected
                                            ? prev.author.filter(a => a !== author.id)
                                            : [...prev.author, author.id]
                                    };
                                });
                            }}>
                                <Image src={`/members/${author.id}.webp`} alt={`${author.id}'s icon`} width={16} height={16} className="h-8 w-8 rounded-full bg-white"/>
                                <span className="pl-2 pr-4">{author.data.name}</span>
                            </li>
                        ))
                        }
                    </ul>
                </section>
                <section className="mb-6">
                    <h2 className="font-bold text-xl mx-4 mb-4">タグ</h2>
                    <ul className="pr-2 flex flex-wrap gap-1 ml-2">
                        {[...new Set(blogs.flatMap(blog => blog.tags))].filter(tag => tag !== undefined).map((tag, i) => (
                            <li key={i} className={`flex items-center p-0.5 bg-gray-500 dark:bg-gray-700 text-gray-200 rounded-full shadow-none hover:shadow-md shadow-black/20 transition-all duration-200 border-3 active:scale-97 cursor-pointer px-2
                            ${searchQuery.tags.includes(tag) ? "border-blue-400 dark:border-blue-400 bg-sky-600 dark:bg-sky-700 shadow" : "bg-gray-500 dark:bg-gray-700 border-transparent"}`}
                                onClick={() => {
                                    setSearchQuery(prev => {
                                        const alreadySelected = prev.tags.includes(tag);
                                        return {
                                            ...prev,
                                            tags: alreadySelected
                                                ? prev.tags.filter(a => a !== tag)
                                                : [...prev.tags, tag]
                                        };
                                    });
                                }}>
                                {tag}
                            </li>
                        ))
                        }
                    </ul>
                </section>
                <section className="mb-6">
                    <h2 className="font-bold text-xl mx-4 mb-4">チーム</h2>
                    <ul className="pr-2 flex flex-col space-y-1 ml-2">
                        {Object.entries(Teams).map(([id, team], i) => (
                            <li key={i} className={`bg-gray-500 dark:bg-gray-700 text-gray-200 rounded-xl shadow-none hover:shadow-md shadow-black/20 transition-all duration-200 w-full overflow-hidden border-3 active:scale-97 cursor-pointer items-center
                            ${searchQuery.team === id ? "border-blue-400 dark:border-blue-400 bg-sky-600 dark:bg-sky-700 shadow" : "bg-gray-500 dark:bg-gray-700 border-transparent"}`}
                            onClick={() => {
                                setSearchQuery(prev => {
                                    return {
                                        ...prev,
                                        team: prev.team === id ? null : id
                                    };
                                });
                            }}>
                                <TeamIcon id={team.id} className="bg-white"/>
                                <h3 className="px-2 py-1">{team.data.name}</h3>
                            </li>
                        ))}
                    </ul>
                </section>
                <section>
                    <h2 className="font-bold text-xl mx-4">Yet Another Blogs</h2>
                    <p className="text-gray-500 text-sm mx-4 mb-4">また別のブログへのリンク</p>
                    <ul className="mx-4">
                        <li>
                            <Link href="https://nsfw.okayugroup.com">
                                <div className="rounded-xl flex overflow-hidden hover:scale-102 transition-transform duration-300 shadow-md hover:shadow-lg group">
                                    <div>
                                        <svg viewBox="0 0 700.585 457.407" className="w-full bg-black">
                                            <defs>
                                                <filter id="ab" width="180.196" height="111.129" x="16.246" y="60.287"
                                                        filterUnits="userSpaceOnUse">
                                                    <feGaussianBlur colorInterpolationFilters="sRGB" in="SourceGraphic"
                                                                    result="result1" stdDeviation="3.384544 3.384544"/>
                                                </filter>
                                            </defs>
                                            <g filter="url(#ab)" opacity=".757"
                                               transform="translate(-46.734 -224.16)scale(3.77953)">
                                                <path fill="#71e7ee"
                                                      d="M185.428 78.844c-3.7-.495-12.896 2.697-6.522 6.162 3.402.203 14.655-2.492 6.522-6.162m-11.38 2.638c-5.457 1.693-10.745 4.034-15.782 6.748-8.668-1.525-17.552 3.314-23.29 9.587-4.887 2.407-3.051 13.91 1.86 7.51 1.225-5.81 7.354-9.139 12.479-11.208-2.137 1.37-7.567 13.392 1.26 14.94 9.185 2.484 18.205-9.748 12.486-17.64 4.025-3.149 11.649-2.707 13.514-7.652-.048-1.324-1.24-2.345-2.526-2.285m-15.435 12.49c3.884 4.392-2.76 12.675-7.769 9.612-1.18-4.31 4.693-7.72 7.77-9.611"/>
                                                <path fill="#b8f4e4"
                                                      d="M71.984 73.42c-3.58.605-1.003 10.268-4.828 4.674-7.016-1.545-1.656 13.895 2.994 8.754-2.701 4.83 5.14 9.326 4.8 2.872 5.302-.562 10.443-11.72 1.631-12.368-3.559 1.178-.475-4.563-4.597-3.932m-42.062.7c-3.53 1.221-.723 5.666-4.39 7.08-.34 3.785 4.444 2.6.435 5.901-2.5 8.512 10.165 6.385 8.507-.376 5.256-2.849-2.628 8.602 4.624 6.083 5.37-4.775 1.142-14.893-5.913-10.978 1.37-4.197 8.864 1.829 7.7-4.548-2.44-3.404-6.338-1.073-8.248-.27.138-1.567-1.022-3.13-2.715-2.893m63.08 1.103c-5.303.155-11.858 6.465-8.009 11.612 4.83 4.733 10.113-1.176 9.998-6.26 3.106 2.95-1.99 13.658 5.028 10.425 2.294-5.644 1.008-16.144-7.017-15.777m-42.416 1.984c-2.392 2.72-4.62 5.123-7.746 7.365.47 3.011 2.59 3.723 3.71 6.504 2.97-.192 7.394 3.275 8.301-2.286 1.677-4.69-1.774-8.029-3.146-11.432zm5.365.467c-5.42 2.662 2.198 9.68 4.871 12.007 6.64-1.017-2.365-10.883-4.87-12.007m33.67 4.672c-2.9 6.325.528-3.729 0 0m-13.41-.244c1.408 2.637-4.005 1.054 0 0m-7.186 2.904c.13.45-.664-.124 0 0m-18.058 3.957-.26.234zm-21.797.467-.212-.042zm1.047-.022c.468.756-.81.454 0 0"/>
                                                <path fill="#71e7ee"
                                                      d="M119.748 139.348c-5.779-1.48-13.303 4.178-7.53 9.213-3.754 1.535 3.399 6.96-1.44 6.027-4.276 3.564 1.112 10.565 6.469 7.995 3.42 2.04 9.256-2.78 3.508-3.463-2.576.802 2.253-3.874.643-6.502-1.287-5.487 3.618-5.416 3.556-11.357-.647-2.247-3.422-1.865-5.206-1.913m23.371.545c-6.321-.36-8.805 4.496-5.403 9.587-2.93 1.032-5.644-7.391-6.915-1.076-1.922.727-4.669 4.842.052 4.286.536 2.49-7.175 4.308-1.582 6.064 2.715-.343 6.66-5.303 5.484-.561 2.568 2.613 4.365 1.53 4.856 4.82 3.047-1.317 7.61.744 8.251-4.839 2.253-4.235-.837-8.907-2.576-10.651.796-2.505 2.15-7.787-2.167-7.63m-22.812 2.927c3.274.445-2.472 1.76 0 0m-.928 8.647c.392.908-.9-.06 0 0m16.433.41c5.143 5.025-4.704-1.072 0 0m8.844 8.312c.434 1.144-1.03.155 0 0"/>
                                                <path fill="#f26bde"
                                                      d="M134.05 68.426c-7.356 1.668-9.87 9.901-14.05 15.25-6.931 11.053-12.103 23.063-17.93 34.703-3.877 1.29-10.278 6.638-12.356 5.632.987-5.988-3.49-12.824.198-18.188 3.62-6.778-6.381-6.306-7.974-.988-3.773 5.304-6.882 11.123-11.972 15.347-4.052 4.57-7.138 9.884-10.993 14.609 2.534-8.66 7.34-17.24 5.625-26.588-.322-8.503-11.643-7.587-15.476-2.112-2.23 2.908-3.996 5.856-5.005.459-4.155-5.472-11.32-1.064-14.885 2.777-5.138 2.758-7.548 16.878-.38 15.452-1.934-6.585 2.782-13.885 9.078-16.125 6.359 5.36-2.4 14.653-4.773 20.847-4.845 3.158-2.142 11.147 3.584 7.625 3.692-5.484 6.465-11.689 8.45-18.028 3.971-3.723 7.93-14 14.169-11.387 1.84 9.484-3.856 18.092-6.164 26.91-.95 6.99 9.228 8.4 11.186 2.026 4.779-7.067 9.988-13.845 16.1-19.802 1.71-2.521 3.238-6.263 3.225-1.142.685 4.655 1.67 10.95-2.237 14.314-3.602 2.402-13.878 6.267-7.948 11.39 9.146 2.142 11.505-8.643 18.793-11.134 2.821-1.617 6.463-3.993 3.338.72-3.348 5.87-6.591 12.005-9.151 18.32-.766 4.478-7.262 10.311-2.777 13.97 5.502.352 6.05-8.587 8.335-12.63 2.087-4.312 3.127-14.693 9.032-13.08 5.72 1.961 12.229 1.664 17.202-2.08 4.023-4.85 3.293.286 5.226 3.562 7.175 4.413 14.153-6.12 17.452-6.753 4.93 6.785 13.248 2.208 18.274-1.806 5.452-4.377 8.613-10.885 12.269-16.667 3.375-7.226-7.142-9.802-8.847-2.473-1.41 6.86-2.455 14.14-9.884 17.295-5.416 5.218-11.55-2.094-6.53-7.094 3.75-3.32 3.306-12.946-2.728-7.96-3.104 4.315-2.922 10.155-6.649 14.14-2.284 5.345-13.343 11.224-10.273 1.03.942-5.877 8.91-13.26 5.636-18.236-5.772.88-6.33 8.807-9.344 12.94-3.865 6.615-12.387 13.037-20.245 9.17-4.09-1.418 1.764-9.211 4.904-10.605 8.68-5.243 13.304-14.86 17.724-23.593 6.88-7.3 14.122-16.03 13.844-26.654-.965-1.856-2.843-3.56-5.072-3.363m-.157 4.25c.329 9.228-7.24 16.058-12.485 22.829-3.668 4.14-7.955 14.143-10.227 15.088 5.899-12.772 12.005-25.606 20.616-36.82l.986-.682z"/>
                                            </g>
                                            <path fill="#71e7ee"
                                                  d="M654.28 77.826q-.348.01-.714.06l-4.5.585c-6.472 1.07-12.867 2.478-19.318 3.638-7.797 1.114-6.222 12.14 1.575 11.026 6.537-1.14 13.006-2.593 19.557-3.673l4.115-.53c7.567-.978 6.463-11.376-.715-11.106m-42.826 9.962c-.798-.02-1.665.13-2.584.485l-6.338 2.446c-16.718 6.362-33.256 13.225-48.916 21.933l-1.727.98c-3.93-1.294-5.647-1.816-11.513-1.951-13.002-.298-25.402 4.48-37.204 9.388-3.108 1.586-6.29 3.036-9.325 4.759-11.838 6.72-22.432 15.542-30.745 26.336-3.998 6.356-8.535 13.357-7.606 21.207 1.91 7.64 12.716 4.94 10.806-2.7.034-.002.09.018.113 0l.007-.006q.003-.003.003-.008c.231-.738.294-1.022.276-1.067l-.002-.001-.002-.002v-.001h-.012c-.076.035-.395.763-.439.817h-.003v-.002c.003-.051.222-.642.954-2.557 1.342-3.51 3.307-6.573 5.318-9.73 7.475-9.353 16.856-17.003 27.281-22.873 2.737-1.541 5.61-2.828 8.415-4.242 8.278-3.301 9.14-3.938 17.662-6.2 3.807-1.01 7.313-1.756 10.852-2.004-9.02 6.164-17.302 13.412-23.66 22.356-2.28 4.299-3.99 6.942-5.249 11.73-1.584 6.032-1.34 12.234 2.076 17.602 1.007 1.58 2.41 2.872 3.616 4.308 1.57 1.102 3.024 2.396 4.714 3.305 7.125 3.832 16 4.064 23.594 1.632 1.928-.617 3.704-1.635 5.555-2.452 5.018-3.046 6.763-3.741 11.09-7.877 6.846-6.547 11.225-14.863 13.367-24.036.39-5.161.907-7.767-.068-12.994-1.15-6.17-4.053-11.9-8.576-16.241 13.952-7.393 28.561-13.392 43.31-19.003l6.388-2.465c6.43-2.481 4.162-10.748-1.427-10.876zm-58.684 38.204c.89.609 1.793 1.203 2.575 1.942 3.197 3.02 5.096 7.003 5.66 11.334.476 3.662.083 5.509-.275 9.153-2.45 8.446-7.324 15.747-14.648 20.724-1.407.956-2.94 1.71-4.412 2.567-1.424.598-2.79 1.36-4.272 1.796-4.818 1.416-10.654.885-14.99-1.731-.83-.502-1.477-1.262-2.215-1.893-1.137-1.683-2.105-2.684-2.384-4.786-.116-.87.034-1.757.168-2.624.698-4.486 2.738-8.111 4.894-12.038 8.15-10.67 18.648-17.83 29.9-24.444z"/>
                                            <path fill="#b8f4e4"
                                                  d="M226.451 57.283c-2.5 0-5.003 1.768-5.003 5.306.418 4.79.597 9.594.706 14.4q-1.205.622-2.37 1.303c-1.218.858-2.5 1.63-3.65 2.575-2.308 1.896-4.204 4.152-5.738 6.642-1.013-3.042-1.944-6.112-2.702-9.232-1.388-6.938-11.2-4.976-9.812 1.962 1.361 5.766 3.29 11.368 5.29 16.937 1.7 4.43 2.805 8.82 9.584 7.092 2.078-.53 3.052-4.137 3.674-5.903 1.002-3.01 2.306-6.124 4.532-8.462.47-.492.944-.91 1.433-1.29.173 10.184-.3 20.392.351 30.555.47 7.06 10.453 6.392 9.983-.667-.264-3.79-.345-7.588-.355-11.39.727.48 1.64.808 2.751.9 3.898.002 2.026.257 5.623-.697.945-.424 1.924-.78 2.834-1.272 4.44-2.402 8.635-6.247 11.241-10.577.676-1.124 1.083-2.39 1.624-3.584.868-3.507 1.597-4.936.918-8.684-.766-4.228-3.837-7.66-7.648-9.434-1.218-.568-2.575-.77-3.862-1.156-1.34-.143-2.674-.382-4.02-.43-3.294-.113-6.57.275-9.76 1.056-.113-3.553-.294-7.104-.62-10.644 0-3.538-2.502-5.306-5.004-5.306M67.477 59.928c-2.502 0-5.003 1.768-5.003 5.305.063 3.74.464 7.465.936 11.175-3.264 1.64-6.444 3.49-8.997 6.12-4.42 5.524 3.393 11.776 7.813 6.25a31 31 0 0 1 2.554-1.706 541 541 0 0 1 1.037 8.757q-1.065.58-2.1 1.22c-4.287 3.21-7.73 6.397-9.5 11.622-1.14 4.397-1.498 8.155 2.153 11.495 2.23 1.503 4.662 2.487 7.312 2.994 3.063.577 6.96 1.093 9.734-.781.774-.524 1.382-1.256 2.073-1.885.29-.535.63-1.045.864-1.606.85-2.024.647-4.275.773-6.411.046-3.542-.196-7.06-.564-10.572 2.092-.826 4.216-1.577 6.332-2.322 4.062-1.15 8.31-2.968 12.62-2.588.178.08.41.088.537.238.111.132-.24.288-.235.46.016.505.188.996.225 1.5.034.468.027.94.04 1.409.182 4.273-.909 8.387-2.489 12.314-1.097 2.557-.56 1.335-1.61 3.664-2.906 6.45 6.218 10.562 9.123 4.11 1.165-2.588.565-1.223 1.795-4.103 2.087-5.37 3.496-10.973 3.156-16.787-.105-1.023-.122-2.06-.318-3.07-.81-4.171-3.22-7.697-7.3-9.216-.81-.3-1.694-.346-2.54-.52-.835-.014-1.67-.08-2.505-.043-4.747.206-9.333 1.806-13.824 3.195-1.384.489-2.772.978-4.155 1.487a782 782 0 0 0-1.145-9.274c1.36-.582 2.735-1.134 4.113-1.673 6.59-2.58 2.94-11.897-3.648-9.317a215 215 0 0 0-1.77.703c-.25-2.273-.436-4.553-.484-6.84 0-3.536-2.502-5.304-5.003-5.304m238.975 4.178c-4.175-.024-8.404 1.049-12.589 2.896-1.92 1.006-3.936 1.849-5.763 3.017-7.723 4.94-13.056 12.703-14.563 21.712.155 1.392.072 2.83.465 4.173 1.673 5.713 7.057 8.26 12.2 10.099 9.328 1.41 13.707-.954 17.514-9.59 1.964-5.813 3.472-11.78 4.39-17.852.461-1.843.098-3.366-.713-4.475 3.537.202 6.846 1.692 9.323 5.078.8 1.093 1.188 2.433 1.78 3.65 3.482 9.768 3.067 20.094.924 30.09-1.445 6.926 8.35 8.97 9.793 2.044 2.535-12.434 2.882-25.168-2.04-37.116-1.294-2.071-2.307-4.344-3.88-6.213-1.28-1.52-2.898-2.753-4.57-3.823-3.976-2.544-8.097-3.666-12.27-3.69m-216.129.215c-5.907-.06-7.225 8.642-.72 9.943 2.762.628 5.48 1.406 8.1 2.487 6.554 2.663 10.321-6.605 3.766-9.268a61.5 61.5 0 0 0-9.905-3.03 6.7 6.7 0 0 0-1.24-.132m55.157 7.285c-1.728-.013-3.498.886-4.586 3.062-1.86 3.712-3.299 7.625-4.73 11.528-.74.182-1.47.379-2.184.582-5.11 1.808-10.253 4.003-13.932 8.15-4.42 5.526 3.395 11.778 7.815 6.253 1.127-1.095 2.417-1.956 3.79-2.673-1.214 3.36-2.37 6.742-3.32 10.189l-.335 2.148c-.95 7.012 8.966 8.354 9.915 1.342l.072-.848c1.505-5.544 3.64-10.888 5.605-16.283 1.584-.054 3.073.202 4.122 1.096.23.197.36.488.54.732.18.31.458.58.54.928.056.236-.147.47-.152.714-.012.573.11 1.14.1 1.714-.039 2.208-.654 4.306-1.23 6.417-.24.58-.492 1.369-.773 2.205-3.36-.1-6.657 3.288-4.558 7.519 1.806 3.3.474 1.537 4.754 4.63 1.663-.41 3.43-.515 4.988-1.225.706-.322 1.085-1.12 1.54-1.748 1.867-2.575 2.624-5.892 3.718-8.81 1.497-5.747 2.613-11.905-.395-17.437-.528-.97-1.396-1.712-2.094-2.568-1.006-.753-1.917-1.652-3.018-2.26-1.443-.795-2.969-1.294-4.537-1.57.82-2.121 1.696-4.22 2.71-6.25 2.076-4.153-1.066-7.51-4.365-7.537m19.618 1.792c-3.66.08-6.8 4.427-3.624 8.398 2.652 3.663 5.177 7.419 7.64 11.212 3.381 5.28 7.123 10.31 10.732 15.433 4.074 5.784 12.254.02 8.18-5.763-3.537-5.02-7.205-9.946-10.52-15.12-2.644-4.068-5.348-8.103-8.22-12.014-1.242-1.554-2.755-2.177-4.188-2.146m133.364 2.498-.062.238c-.927 5.787-2.244 11.508-4.155 17.05-1.674 3.75-2.55 4.008-6.2 2.984-1.386-1.007-4.318-1.5-4.954-3.372-.054-.158.231-.26.274-.42.105-.395.107-.81.16-1.213 2.905-7.748 7.525-11.714 14.851-15.23q.044-.017.086-.037m-57.932 6.202c1.4.016 2.587.238 4.158.447.642.244 1.337.38 1.928.732 2.171 1.29.774 4.253.194 5.908-.34.659-.603 1.366-1.024 1.978-2.06 2.992-5.612 5.65-8.974 6.952-.647.104-.94.24-1.005.227h-.005l-.003-.002-.003-.003v-.003h-.002v-.01l.002-.008c.01-.04.066-.123.158-.276-1.443-.12-2.624.2-3.532.793.045-4.744.074-9.486-.124-14.22l-.015-1.078c2.2-.695 4.47-1.166 6.756-1.375a15 15 0 0 1 1.491-.062m-26.694 14.799.09.034c.112.039.17.376.153.43h-.003v.004l-.002.003h-.005v-.003l-.003-.003-.003-.002-.002-.003v-.002l-.003-.003-.002-.005c-.073-.14-.147-.293-.22-.45M66.982 107.2c.11 1.707.168 3.417.142 5.134-.01.128-.024.676-.042 1.298-.593-.05-.706-.102-1.383-.271-.38-.134-1.388-.33-2.23-.608.106-.355.244-.92.405-1.47.688-1.658 1.815-2.946 3.108-4.083m-4.768 4.84c.3.01.481.23.636.475-.304-.14-.538-.3-.636-.475m82.976.46a4 4 0 0 1-.372.488l-.003.003-.002.003h-.008l-.003-.003h-.002v-.003l-.003-.002v-.003c-.017-.058.058-.33.15-.372zm-78.177 2.738c-.022.29-.048.49-.08.53l-.003.002-.003.003q-.037.016-.057.008s-.006-.005-.008-.005l-.002-.003-.003-.002-.002-.003c-.03-.072.081-.334.157-.53z"/>
                                            <path fill="#71e7ee"
                                                  d="M407.782 306.459c-6.89.166-13.793.495-20.547 1.984-3.873.932-7.903 1.8-11.188 4.183-.872.748-1.14 1.648-1.008 2.458-.802.393-1.413 1.219-1.413 2.476.296 3.375.965 6.698 1.645 10.01.214 1.335.564 2.637.956 3.928.862 2.808 4.222 2.38 4.955.293.603.555 1.502.83 2.607.514 3.466-1.112 7.06-1.67 10.64-2.275 4.877-.78 9.794-1.303 14.72-1.644 1.148-.003.69-.078 1.388.078.955.138 1.71-.117 2.237-.577 1.088 1.13 3.172 1.274 4.236-.67 1.144-2.114 2.103-4.317 2.953-6.566.897-2.551 2.712-6.97 1.827-9.652-.277-.841-.824-1.57-1.236-2.353-.484-.324-.93-.713-1.452-.972-1.128-.56-2.203-.702-3.433-.846-2.615-.307-5.257-.381-7.887-.37m87.488 2.085a16 16 0 0 0-1.87.106c-4.052.532-8.037 1.548-11.89 2.9-2.394.902-4.89 1.802-6.863 3.443-2.133-.823-4.64 1.635-2.898 4.072 1.206 3.632 1.982 7.388 2.781 11.125.398 1.767.785 3.537 1.173 5.306.125.57.36 1.02.66 1.362.243 1.164 1.247 2.17 2.92 2.017 3.47-.41 6.857-1.285 10.29-1.91.22.754 1.99-.96 2.322-.145q.143.034.282.053c.633 2.175 4.068 2.708 4.988-.126 1.225-3.772 2.456-7.552 3.26-11.441.71-3.574 1.547-7.538 1.1-11.201-.068-.55-.254-1.078-.382-1.617-.3-.602-.507-1.26-.898-1.807-1.186-1.66-3.08-2.123-4.976-2.14zm-87.365 3.088c2.435-.011 4.882.06 7.303.35.703.084 1.776.078 2.208.78-.187-.07-.4-.323-.56-.206-.176.129-.023.437-.053.653a10 10 0 0 1-.184.96c-.395 1.622-.984 3.193-1.538 4.764-.678 1.732-1.38 3.457-2.239 5.107-.38-.346-.902-.6-1.572-.696-1.584-.188-.757-.138-2.48-.12-2.489.174-4.973.39-7.452.66.175-1.26.321-2.526.38-3.8.195-2.735.415-5.501.11-8.237v-.003a224 224 0 0 1 6.075-.213zm-11.23.586c.008.117.012.238.035.362.225 2.373.022 4.77-.148 7.14-.072 1.624-.304 3.233-.549 4.838q-1.226.175-2.447.37l-.924.158c-.073-1.316-.173-2.63-.356-3.935-.398-2.546-.943-5.07-2.435-7.228a3.4 3.4 0 0 0-.539-.632 73 73 0 0 1 7.365-1.074zm98.897 1.448c.315-.002.615.046.854.215.12.085-.07.458-.094.515.047.263.118.522.131.788.126 2.477-.297 4.993-.778 7.44a4 4 0 0 0-.456-.215c-.445-.133-.877-.321-1.335-.4-2.176-.377-4.393.356-6.545.529-2.93.407-5.864.792-8.813 1.034-.059.008-.116.012-.173.027-.307-1.344-.615-2.707-1.01-4.036.033-.034.06-.07.092-.107 1.553-1.618 3.835-2.294 5.883-3.06 3.482-1.194 7.07-2.16 10.728-2.613.42.034.99-.114 1.516-.117m-110.377.594c-.296.726-.257 1.62.35 2.532 1.06 1.534 1.355 3.34 1.626 5.144.185 1.354.272 2.718.338 4.08-1.732.358-3.452.777-5.142 1.316-.769.219-1.3.628-1.627 1.122a22 22 0 0 1-.4-1.922c-.61-2.974-1.2-5.952-1.54-8.971q0-.297-.044-.56.33-.17.658-.447c1.777-1.108 3.761-1.766 5.781-2.294m108.14 12.823c.13.003.194.01.21.026l.002.002h.001v.009c-.013.024-.087.06-.187.115.44.17.854.24 1.235.226a103 103 0 0 1-1.287 4.385c-.074-.02-.15-.046-.227-.06-.49-.08-.973-.215-1.468-.243-.94-.052-2.055.185-2.968.335-2.704.493-5.38 1.14-8.09 1.59a856 856 0 0 0-.966-4.357q-.052-.23-.092-.428c2.864-.243 5.715-.62 8.562-1.016 1.597-.154 3.182-.564 4.794-.578.215-.002.37-.004.48-.002zm-99.135 3.09c-1.132.027-2.247.769-2.49 2.35a46 46 0 0 0-.52 5.09c-.224.04-.447.074-.67.114-4.486.807-9.105 1.69-13.027 4.144-3.103 1.939-.36 6.326 2.741 4.387 3.27-2.008 7.13-2.716 10.86-3.378q0 .495.007.99.018 1.137.04 2.276c-1.556.352-3.114.696-4.687.96-1.91.274-2.61 1.827-2.313 3.159-.524.236-1 .678-1.345 1.367-1.402 3.178-1.258 6.738-1.199 10.135a73 73 0 0 0 1.25 11.813c.466 2.452 2.98 2.78 4.312 1.602.517.446 1.252.696 2.184.58 3.62-.513 7.2-1.258 10.782-1.984 2.257-.437 1.182-.232 3.225-.615 2.196-.413 2.696-2.47 1.931-3.856 1.034-.135 1.993-.88 2.213-2.336.235-1.616.227-3.238.255-4.868.094-3.386.236-6.771.362-10.157.003-1.806.075-5.635-1.402-6.965-.535-.48-1.226-.753-1.838-1.13-.344-.026-.687-.085-1.03-.08-.98.01-1.92.43-2.899.462-1.552.282-3.1.583-4.65.868-.007-.426-.01-.852-.022-1.277q-.01-.876-.008-1.753c3.628-.507 7.268-.923 10.896-1.43l1.392-.211c3.617-.55 2.84-5.665-.777-5.115l-1.33.203c-3.339.467-6.688.856-10.027 1.31.085-1.176.213-2.35.405-3.518.313-2.034-1.168-3.173-2.623-3.137zm60.117.752c-1.212-.046-2.453.72-2.666 2.42h.001c-.199 3.12-.144 6.252-.089 9.38-2.806.485-5.604 1.02-8.377 1.668-3.588.718-2.573 5.79 1.014 5.074a139 139 0 0 1 7.434-1.502c.071 3.435.272 6.867.448 10.298.047.845.354 1.48.802 1.913-4.142 2.353-8.284 4.723-12.62 6.703-3.55.887-2.294 5.907 1.255 5.02 5.18-2.116 10.005-5.007 14.863-7.76 4.435-2.48 2.25-1.252 6.553-3.681 3.185-1.8.641-6.304-2.544-4.505-2.062 1.164-2.63 1.485-3.155 1.78-.183-3.534-.389-7.07-.442-10.61 2.097-.36 4.207-.771 6.326-.533 3.645.318 4.094-4.837.45-5.155-2.304-.17-4.579.079-6.846.43-.046-2.628-.07-5.257.06-7.878.24-1.928-1.097-3.013-2.47-3.062zm50.224 9.555c-.108.008-.217.012-.33.034-1.652.226-.765.105-2.66.36-5.373.725-10.77 1.255-16.144 1.969-4.494.604-9.017 1.26-13.34 2.674-3.426 1.284-1.61 6.128 1.816 4.843 1.858-.586 3.752-1.027 5.663-1.386-2.3 3.12-4.39 6.398-6.552 9.617-2.174 3.289-4.517 6.458-6.736 9.716l-.26.413c-1.933 3.106 2.458 5.84 4.392 2.734q.07-.118.144-.234c1.584-2.325 3.23-4.605 4.834-6.916.401-.06.82-.22 1.243-.502h.002c2.134-1.42 4.43-2.541 6.763-3.587-.846 2.184-1.94 4.26-3.124 6.29-1.86 3.074-4.152 5.833-6.58 8.467-2.477 2.692 1.328 6.196 3.806 3.504 2.678-2.914 5.202-5.97 7.248-9.371 1.832-3.164 3.472-6.43 4.461-9.966.14-.47.174-.902.123-1.292a68 68 0 0 1 4.92-1.46c-.207.452-.293 1.005-.2 1.648.336 2.276-.296 4.535-.906 6.708-1.487 4.758-3.843 9.177-6.346 13.467-1.279 2.315-2.8 4.476-4.327 6.63-2.113 2.986 2.11 5.976 4.223 2.99 1.612-2.281 3.218-4.571 4.575-7.017 2.718-4.676 5.27-9.493 6.86-14.685.79-2.87 1.508-5.832 1.043-8.826-.12-.83-.48-1.432-.96-1.822q.294-.06.588-.116c1.768-.244 3.54-.64 5.327-.728.388-.022 1.346-.117 1.523.408-.003.07-.023.142-.01.213.108.705.385 1.35.45 2.073.052.58.022 1.849.011 2.376-.133 2.973-.873 5.866-1.794 8.68-.828 2.48-1.73 4.93-2.66 7.372-.525 1.496-1.218 2.92-1.896 4.349-.218.292-.397.62-.576.946l-.416-.388-.733-.732c-2.596-2.578-6.24 1.094-3.645 3.672l.925.913c.601.526 1.464 1.362 2.216 1.667 2.013.817 3.66.65 5.142-1.008a37 37 0 0 0 1.763-2.855c.734-1.552 1.481-3.098 2.053-4.72a193 193 0 0 0 2.748-7.616c1.072-3.32 1.926-6.728 2.046-10.232.023-2.618-.026-5.53-1.625-7.766-.362-.504-.856-.898-1.284-1.347-.533-.278-1.033-.63-1.599-.832-2.756-.99-6.186.21-8.963.477-5.06.998-10.022 2.399-14.773 4.434q-.864.377-1.725.764a105 105 0 0 1 2.933-4.12c.888-1.141.787-2.327.203-3.166q.837-.116 1.673-.227c5.376-.713 10.774-1.245 16.148-1.968l2.667-.362c3.511-.478 2.965-5.305-.368-5.158zm-100.299 8.374c.02 0 .04.003.046.012h.002l.002.004.002.003q.005.014-.012.053c-.026.046-.109.034-.163.046-.16 2.01-.535.954-.874.139q.181-.034.363-.072c.16-.034.5-.178.634-.183zm-1.4.325c.067.914.11 1.81.098 2.735l-.01.344c-2.92.234-5.778.94-8.684 1.297-2.365.384-4.736.754-7.083 1.236q.112-.428.264-.846c.327-.654.404-1.268.305-1.81 2.491-.435 4.946-1.054 7.42-1.583 2.246-.372 4.477-.822 6.718-1.228.327-.047.65-.092.975-.145zm-.116 8.282q-.053 1.44-.099 2.882c-2.25.113-4.483.43-6.715.763-2.96.412-5.984.867-8.708 2.162q-.195.098-.362.207a74 74 0 0 1-.07-1.804q-.013-.742-.037-1.496c.085-.023.171-.04.26-.066 2.673-.588 5.377-1.01 8.077-1.45 2.567-.251 5.085-.964 7.652-1.2zm-30.073 6.616c-1.536-.034-3.092 1.263-2.565 3.37.763 2.738 1.362 5.524 1.85 8.324.274 2.185.652 4.354.957 6.535.66 3.484 2.745 4.084 5.986 4.339 4.856.034 9.702-.338 14.56-.373 4.986.027 9.972.133 14.957.212 1.565.07 3.12.034 4.678-.113 3.64-.356 3.137-5.505-.504-5.15-1.364.139-2.723.147-4.092.09-5.026-.08-10.052-.19-15.078-.212-4.725.04-9.44.364-14.163.386-.803-.047-.955-.14-.986-.145h-.006v.004c-.008.023.007.087-.129.256l-.003.004c-.01.01-.042.01-.055.026l-.002.003h-.002v.008c.022.13.101.246.126.375v.006h-.007c-.012-.003-.038-.027-.05-.027l-.106-.405c-.315-2.237-.698-4.464-.983-6.705-.513-2.922-1.132-5.83-1.927-8.688-.36-1.442-1.403-2.092-2.454-2.116zm29.811 1.453a10 10 0 0 1-.084.67c-.11.734.011 1.35.281 1.838-.086.007-.172.026-.262.04-2.087.39-.988.18-3.299.63-3.454.7-6.905 1.42-10.396 1.92-.41.053-.766.163-1.068.318a65 65 0 0 1-.408-2.89c.642.266 1.434.266 2.29-.162h.001c2.228-1.008 4.7-1.334 7.103-1.663 1.944-.277 3.885-.582 5.843-.702zm96.402 16.027c-.13.215-.27.422-.432.61.143-.465.286-.59.432-.61"/>
                                            <path fill="#f26bde"
                                                  d="M58.59 242.212c-7.592-18.5 7.168-40.59 22.59-51.107 15.895-20.17 37.051-1.52 26.463 19.275-3.798 27.794-21.322 50.803-36.07 73.755 20.767 26.054 24.593-20.515 34.037-33.687 7.334-20.215 22.668-35.553 35.365-52.421 6.842-10.79 33.807-35.304 40.93-15.13 5.651 32.554-10.67 63.458-21.046 93.383-11.405 22.407 16.39 40.64 29.554 17.862 17.568-24.14 33.471-49.747 55.62-70.207 18.414-15.898 22.231-44.428 45.9-54.786 2.017-22.666-22.49.205-20.683 13.667-1.862 26.533 12.56 54.694-1.132 80.002-1.83 16.412-21.08 32.662-33.124 30.37 3.188 21.143 28.36-10.523 40.936-14.775 29.68-20.717 64.766-32.481 93.675-54.245 22.944-21.957 38.22-50.275 51.833-78.548 25.075-26.9 52.27-58.28 51.648-97.354-15.62-26.62-41.67 7.408-50.248 24.06-41.66 58.097-66 125.978-100.81 188.015-9.963 21.406-18.905 43.266-33.01 62.366-7.56 20.465-13.92 41.092-24.54 61.063 19.394 16.135 17.242-29.316 27.33-39.11 11.725-19.43 18.58-41.458 29.34-61.156-12.125 6.35 23.782 9.063 31.18 12.678 32.863 4.596 60.57-21.712 77.902-46.605 6.836-15.1 22.871-38.871 18.257-51.911-12.002 3.556-18.279 29.206-27.312 41.59-7.48 18.062-10.163 41.388-.273 58.913 21.56 8.627 46.015-9.933 56.642-28.54 13.094-19.382 27.253-39.224 33.49-61.79-14.342-17.901-24.34 22.383-27.476 34.349-12.105 23.515 14.59 52.71 38.85 40.542 21.025-10.17 40.333-22.468 51.455-43.978 8.456-16.298 37.686-40.31 15.513-56.666-24.127 3.416-24.968 36.463-26.286 55.66 3.15 12.594 6.047 14.49 6.685.487 2.845-13.562 7.04-44.418 17.116-46.086-2.744 21.53-23.079 38.044-34.213 56.617-14.08 11.424-37.576 33.654-55.614 18.832-10.005-17.736 3.315-39.416 10.32-56.367-11.156-10.994-7.647 16.658-17.999 23.927-12.847 16.239-21.337 37.72-39.94 48.265-10.684 6.804-28.469 12.916-23.65-8.09-3.214-28.188 15.555-51.336 26.4-75.65-16.24-10.443-14.932 28.715-26.705 37.19-14.505 22.693-36.102 46.284-64.458 48.9-17.71 3.925-44.3-23.523-52.976-.31-9.313 23.205-21.488 45.049-31.43 67.95-2.21 11.354-23.89 39.665-.488 35.964 6.665-19.575 21.327-35.985 20.303-57.648 10.687-21.175 24.17-41.157 32.925-63.483 21.292-40.325 41.46-81.215 60.34-122.712 16.567-32.561 34.567-64.842 56.862-93.747 25.48-19.74 13.15 20.787 6.992 32.678-14.988 30.929-43.86 52.02-58.57 83.155-13.906 25.914-33.897 49.66-61.347 61.687-29.299 15.696-59.282 30.553-85.692 51.012-18.017.295-35.427 31.395-7.7 26.203 28.053-2.663 38.515-32.64 45.12-55.77 5.328-24.101-8.515-48.692-1.984-72.193 13.52-9.43-.709-29.023-11.737-11.91-18.616 16.549-25.34 42.798-45.65 58.267-19.218 19.17-32.534 43-49.42 63.939-16.365 15.144.945-28.06 4.966-36.545 8.696-24.485 15.912-52.476 7.087-77.794-11.548-20.42-42.424-6.077-52.488 9.613-15.056 17.23-29.74 35.115-42.079 54.403-3.705 17.354-23.024 36.88-21.954 50.385 18.791 20.52 25.704-24.872 35.947-35.555 8.931-21.546 18.683-48.725 7.951-70.882-15.958-22.82-41.48-.781-55.045 12.934-11.867 12.134-22.255 42.592-4.719 51.029l1.08-1.852-.736-2.375z"/>

                                        </svg>
                                        <h3 className="px-2 py-1 bg-pink-400 dark:bg-pink-600">おかゆのNSFW置き場</h3>
                                    </div>
                                    <div className="bg-gray-400 px-2 flex items-center">
                                        <FaLongArrowAltRight size={20} className="transition-transform group-hover:translate-x-1 duration-300"/>
                                    </div>
                                </div>
                            </Link>
                        </li>
                    </ul>
                </section>
            </aside>

            {/* メイン: 左マージンをレスポンシブに */}
            <div className="lg:ml-88 mt-30 lg:mt-20 pt-4 mx-4 lg:mr-8">
                <main className="pt-4 min-h-[68vh]">
                    <div className="justify-between flex items-center mb-4">
                        <div>
                            <h1 className="font-extrabold text-3xl mb-2">ブログ</h1>
                            <p className="text-gray-700 dark:text-gray-400">{
                                blogsSearchedAll.length == 0 ? "検索クエリに該当する記事がありません。" :
                                    blogsSearchedAll.length > searchQuery.limit ?
                                        `${blogsSearchedAll.length}件のうち${blogsSearched.length}件 (${searchQuery.page}/${pages}ページ)`
                                        : `${blogsSearchedAll.length}件のうちすべて (1/1ページ)`}</p>
                        </div>
                        <div className="flex space-x-2">
                            <div className={`p-2 rounded bg-gray-200 dark:bg-gray-800 ${(1 >= searchQuery.page) ? "opacity-50" : "hover:bg-gray-300 hover:dark:bg-gray-600"}`} onClick={() => {
                                if (searchQuery.page > 1) {
                                    setSearchQuery({...searchQuery, page: searchQuery.page - 1});
                                }
                            }}><FaArrowLeftLong size={18}/></div>

                            <div className={`p-2 rounded bg-gray-200 dark:bg-gray-800 ${(pages <= searchQuery.page) ? "opacity-50" : "hover:bg-gray-300 hover:dark:bg-gray-600"}`} onClick={() => {
                                if (searchQuery.page < pages) {
                                    setSearchQuery({...searchQuery, page: searchQuery.page + 1});
                                }
                            }}><FaArrowRightLong size={18}/></div>
                        </div>

                    </div>
                    <section className="mt-4">
                        {
                            blogsSearched.map((item, i) => {
                                const date = item.createdAt ?? item.updatedAt;
                                return <article key={i} className="mb-6 p-4 bg-white dark:bg-gray-800 rounded-lg shadow dark:shadow-none">
                                    <h2 className="text-xl font-bold mb-2">{item.title}</h2>
                                    <p className="text-gray-600 dark:text-gray-400 mb-2">{item.description || "No description available."}</p>
                                    <div className="flex items-center space-x-2 mb-2">
                                        { item.author && Members[item.author] ? <Link href={`/member/${item.author}`} className="inline-flex items-center space-x-2 p-1 rounded-md transition-colors hover:bg-gray-400/20 dark:hover:bg-white/20">
                                            <Image src={`/members/${item.author}.webp`} alt={`${item.author}'s icon`} width={24} height={24} className="h-6 w-6 rounded-full bg-white"/>
                                            <span className="text-sm text-gray-500 dark:text-gray-300">{Members[item.author]?.data.name || item.author}</span>
                                        </Link> : <span>匿名/未指定</span>
                                        }
                                        { date ? <span className="text-xs text-gray-400 dark:text-gray-500">・{new Date(date).toLocaleDateString()}</span> : <span className="text-xs text-gray-400 dark:text-gray-500">・日付不明</span> }
                                    </div>
                                    <a href={`/blog/${item.slug}`} className="text-blue-600 dark:text-blue-400 hover:underline">続きを読む</a>
                                </article>;
                            })
                        }
                    </section>
                </main>
                <footer className="mt-4 mb-8 space-y-4 text-center ">
                    <div className="border-l-4 border-l-yellow-600 bg-yellow-400/50 dark:bg-yellow-600/50 shadow-md py-2 rounded-r-xl text-sm w-full pl-2 pr-4">
                        <div className="w-full text-gray-800 dark:text-gray-400">
                            <p className="mb-1">これらのブログ記事はおかゆグループのメンバーによって書かれていますが、内容は各著者の個人的な意見を反映しており、おかゆグループ自体の公式見解を必ずしも代表するものではありません。</p>
                            <p>このブログはGitHubで管理され、その後Next.jsを用いてビルドされてCloudflareで公開されています。</p>
                        </div>
                        <p><Link href="/blog/policy" className="text-blue-500 dark:text-blue-400 hover:underline">詳しくはこちら。</Link></p>
                    </div>
                    <p className="text-gray-600 dark:text-gray-300 text-sm text-center">
                        &copy; 2024-{new Date().getFullYear()} おかゆグループ. All rights reserved.
                    </p>
                </footer>
            </div>


        </SharedBody>
    );
}

